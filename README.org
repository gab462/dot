#+PROPERTY: :mkdirp yes

* Apps

** Emacs

#+begin_src elisp :tangle ~/.config/emacs/init.el
  ;; Aesthetics

  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (menu-bar-mode -1)

  ;; (load-theme 'leuven-dark)
  (load-theme 'modus-vivendi)

  (set-face-attribute 'default nil :family "Liberation Mono" :height 180)
  (set-face-attribute 'mode-line nil :box nil)

  (when (eq system-type 'windows-nt)
    (add-hook 'window-setup-hook 'toggle-frame-maximized t))

  ;; Options

  (setq make-backup-files nil
        create-lockfiles nil
        auto-save-default nil
        auto-save-list-file-prefix nil)

  (setq kill-whole-line t
        show-paren-delay 0
        ring-bell-function 'ignore)

  (setq-default tab-always-indent 'complete
            indent-tabs-mode nil
            c-default-style "k&r")

  (put 'dired-find-alternate-file 'disabled nil)

  ;; Minor modes

  (electric-pair-mode t)
  (delete-selection-mode t)
  (show-paren-mode t)

  (windmove-default-keybindings)

  ;; Remaps / Aliases
  ;; Usable editing keybindings: C-= C-; C-' C-, C-. M-+ M-* M-_ M-#
  ;; C-z - remappable as already bound to C-x C-z

  (defalias 'yes-or-no-p 'y-or-n-p)
  (global-set-key (kbd "M-/") 'hippie-expand)
  (global-set-key (kbd "C-x k") 'kill-this-buffer)

  (global-set-key (kbd "M-+") 'raise-sexp)
#+end_src

** Alacritty

#+begin_src yml :tangle ~/.config/alacritty/alacritty.yml
  font:
    normal:
      family: Terminus
      style: Regular

    bold:
      family: Terminus
      style: Bold

    italic:
      family: Terminus
      style: Italic

    bold_italic:
      family: Terminus
      style: Bold Italic

    size: 23

  # XTerm's default colors
  colors:
    # Default colors
    primary:
      background: '0x000000'
      foreground: '0xffffff'
    # Normal colors
    normal:
      black:   '0x000000'
      red:     '0xcd0000'
      green:   '0x00cd00'
      yellow:  '0xcdcd00'
      blue:    '0x0000ee'
      magenta: '0xcd00cd'
      cyan:    '0x00cdcd'
      white:   '0xe5e5e5'

    # Bright colors
    bright:
      black:   '0x7f7f7f'
      red:     '0xff0000'
      green:   '0x00ff00'
      yellow:  '0xffff00'
      blue:    '0x5c5cff'
      magenta: '0xff00ff'
      cyan:    '0x00ffff'
      white:   '0xffffff'
#+end_src

** Vim

#+begin_src vim :tangle ~/.vimrc
  set nocompatible

  let g:netrw_dirhistmax = 0
  set viminfofile=NONE
  set clipboard=exclude:.*

  filetype plugin indent on

  syntax on
  set bg=dark
  let &t_8f="\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b="\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors

  set expandtab
  set timeout
  set ttimeoutlen=0
  set noswapfile nowritebackup nobackup
  set autoindent
  set incsearch ignorecase smartcase
#+end_src

** Qutebrowser

#+begin_src python :tangle ~/.config/qutebrowser/config.py
  config.load_autoconfig(False)

  c.content.private_browsing = True

  c.downloads.location.directory = '/home/HDD/Downloads'

  c.statusbar.show = 'in-mode'

  c.statusbar.padding = {'top': 6, 'right': 8, 'bottom': 6, 'left': 8}

  c.tabs.favicons.scale = 1

  c.tabs.padding = {'top': 6, 'right': 8, 'bottom': 6, 'left': 8}

  c.tabs.show = 'multiple'

  c.tabs.indicator.width = 1

  c.colors.webpage.darkmode.enabled = True

  c.url.start_pages = 'https://start.duckduckgo.com/'

  c.colors.downloads.system.bg = 'none'
  c.colors.tabs.indicator.system = 'none'
#+end_src

* Shell

** Environment Variables

#+begin_src sh :tangle ~/.zshenv
  export XDG_DATA_HOME=$HOME/.local/share
  export XDG_CONFIG_HOME=$HOME/.config
  export XDG_CACHE_HOME=$HOME/.cache

  export ZDOTDIR=$XDG_CONFIG_HOME/zsh
  export GTK2_RC_FILES=$XDG_CONFIG_HOME/gtk-2.0/gtkrc
  export LEIN_HOME=$XDG_DATA_HOME/lein
  export GNUPGHOME=$XDG_DATA_HOME/gnupg
  export LESSHISTFILE=-
  export NPM_CONFIG_USERCONFIG=$XDG_CONFIG_HOME/npm/npmrc
  export WINEPREFIX=$XDG_DATA_HOME/wineprefixes/default/
  export SQLITE_HISTORY=$XDG_DATA_HOME/sqlite_history
  export KIVY_HOME=$XDG_DATA_HOME/kivy
  export PIPENV_VENV_IN_PROJECT=1
  export GUILE_AUTO_COMPILE=0
  export _JAVA_OPTIONS=-Djava.util.prefs.userRoot="$XDG_CONFIG_HOME"/java
  export EXINIT='set ai nu'

  export PATH=$PATH:~/.local/bin/
  export EDITOR=mg
  export VISUAL=mg
  export ALSA_CARD=Headset

  export KEYTIMEOUT=1

  export HDD=/home/HDD
  export DOCUMENTS=/home/HDD/Documents
  export APPS=/home/HDD/Downloads/Apps
  export DOWNLOADS=/home/HDD/Downloads
  export PROJECTS=/home/HDD/Documents/7CC
#+end_src

** zsh config

#+begin_src sh :tangle ~/.config/zsh/.zshrc
  source $ZDOTDIR/.aliases

  setopt COMPLETE_ALIASES

  autoload -Uz compinit
  compinit -d $XDG_CACHE_HOME/zsh/zcompdump-$ZSH_VERSION

  source /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

  TYPEWRITTEN_CURSOR=block
  TYPEWRITTEN_SYMBOL="->"
  fpath+=$XDG_CONFIG_HOME/zsh/typewritten

  autoload -U promptinit
  promptinit
  prompt typewritten
#+end_src

** Aliases

#+begin_src sh :tangle ~/.config/zsh/.aliases
  alias ls='ls --file-type --group-directories-first'
  alias grep='grep --color=auto'
  alias cp='cp -i'
  alias mv='mv -i'

  ext ()
  {
      if [ -f $1 ] ; then
          case $1 in
              ,*.tar.bz2)   tar xjf $1   ;;
              ,*.tar.gz)    tar xzf $1   ;;
              ,*.bz2)       bunzip2 $1   ;;
              ,*.rar)       unrar x $1   ;;
              ,*.gz)        gunzip $1    ;;
              ,*.tar)       tar xf $1    ;;
              ,*.tbz2)      tar xjf $1   ;;
              ,*.tgz)       tar xzf $1   ;;
              ,*.zip)       unzip $1     ;;
              ,*.Z)         uncompress $1;;
              ,*.7z)        7z x $1      ;;
              ,*.deb)       ar x $1      ;;
              ,*.tar.xz)    tar xf $1    ;;
              ,*.tar.zst)   unzstd $1    ;;
              ,*)           echo "'$1' cannot be extracted via ex()" ;;
          esac
      else
          echo "'$1' is not a valid file"
      fi
  }

  count() {
      COUNT=0
      echo 0
      while true; do
          sleep 1
          let COUNT=COUNT+1
          echo "\e[1A\e[K$COUNT"
      done
  }
#+end_src

** Scripts

*** qlenv

Create an isolated quicklisp environment.

#+begin_src sh :tangle ~/.local/bin/qlenv :shebang "#!/bin/sh"
  case $1 in
      init)
          mkdir .qlenv
          curl https://beta.quicklisp.org/quicklisp.lisp -so .qlenv/quicklisp.lisp
          sbcl --script <(echo "(load \".qlenv/quicklisp.lisp\") (quicklisp-quickstart:install :path \".qlenv/quicklisp/\")")
          ;;
      repl)
          sbcl --load .qlenv/quicklisp/setup.lisp --eval "(push \"$(pwd)/\" asdf:*central-registry*)"
          ;;
  esac
#+end_src

** XDG Base Directory

*** npm

#+begin_src conf :tangle ~/.config/npm/npmrc
  prefix=${XDG_DATA_HOME}/npm
  cache=${XDG_CACHE_HOME}/npm
  tmp=${XDG_RUNTIME_DIR}/npm
  init-module=${XDG_CONFIG_HOME}/npm/config/npm-init.js
#+end_src

